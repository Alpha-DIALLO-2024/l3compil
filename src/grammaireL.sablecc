Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
special = ['_' + '$'];
first_char_identif = [lettre + special];

Tokens

test = 'test';
nombre = (chiffre)+;
espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
if = 'si';
type = 'entier';
then = 'alors';
else = 'sinon';
l_acc = '{';
r_acc = '}';
l_sqr = '[';
r_sqr = ']';
ret = 'retour';
while = 'tantque';
do = 'faire';
identif = first_char_identif (chiffre | lettre | special)*;
plus = '+';
minus = '-';
or = '|';
and = '&';
less = '<';
mult = '*';
div = '/';
not = '!';
equals = '=';
l_par = '(';
r_par = ')';
comma = ',';
semicol = ';';

Ignored Tokens

espaces, commentaire;

Productions

programme = l_decfonc;
expr = 
    {or} expr or log_and |
    {and} log_and;
log_and = 
    {and} log_and and comparison | 
    {less} comparison;
comparison = 
    {less} comparison less adsous |
    {equality} comparison equals adsous |
    {adsous} adsous;
adsous = 
    {addition} adsous plus multdiv |
    {sous} adsous minus multdiv |
    {multdiv} multdiv;
multdiv = 
    {mult} multdiv mult neg |
    {div} multdiv div neg |
    {neg} neg;
neg = 
    {neg} not neg |
    {par} par;
par = 
    {parenthesis} l_par expr r_par |
    {nombre} nombre |
    {identif} identif |
    {arr} identif l_sqr expr r_sqr |
    {fcall} function_call;
list_expr = 
    {list_expr} list_expr comma expr |
    {expr} expr |
    {empty} ;
function_call =
    identif l_par list_expr r_par;

list_instr = list_instr instr |
    {instr} instr;

identif_tab = identif l_sqr expr r_sqr;

affectation = identif equals expr |
    {tab} identif_tab equals expr;
cond_else =
    {if_then} cond | 
    {if_then_else} cond else bloc ;
cond = 
    {if_then} if expr then bloc;
bloc = l_acc list_instr r_acc |
    {empty} l_acc r_acc;
return = ret expr;
loop = while expr do bloc;
instr = 
    {aff} affectation semicol |
    {condition} cond_else |
    {ret} return semicol |
    {loop} loop |
    {fcall} function_call semicol;

l_decfonc = decfonc l_decfonc | 
    {decfonc} decfonc |
    {l_decvar} l_decvar semicol l_decfonc |
    {decvar} l_decvar semicol;

decfonc = 
    {vars_parameterized} identif l_par l_params r_par l_decvar semicol bloc |
    {no_vars_parameterized} identif l_par l_params r_par bloc |
    {vars_no_params} identif l_par r_par l_decvar semicol bloc |
    {no_vars_no_params} identif l_par r_par bloc;

l_params = type identif comma l_params | 
    {identif} type identif;

l_decvar = decvar comma l_decvar |
    {decvar} decvar;

decvar = type identif |
    {dectab} dectab;

dectab = type identif l_sqr nombre r_sqr;



