/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOnlyFuncProgramme(AOnlyFuncProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndLogAnd(AAndLogAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessLogAnd(ALessLogAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessComparison(ALessComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualityComparison(AEqualityComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdsousComparison(AAdsousComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionAdsous(AAdditionAdsous node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASousAdsous(ASousAdsous node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultdivAdsous(AMultdivAdsous node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultMultdiv(AMultMultdiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivMultdiv(ADivMultdiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegMultdiv(ANegMultdiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegNeg(ANegNeg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParNeg(AParNeg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesisPar(AParenthesisPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombrePar(ANombrePar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifPar(AIdentifPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrPar(AArrPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFcallPar(AFcallPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALcallPar(ALcallPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEcrireCall(AEcrireCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALireCall(ALireCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListExprListExpr(AListExprListExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprListExpr(AExprListExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyListExpr(AEmptyListExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListInstr(AListInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrListInstr(AInstrListInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifTab(AIdentifTab node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectation(AAffectation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATabAffectation(ATabAffectation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfThenCondElse(AIfThenCondElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfThenElseCondElse(AIfThenElseCondElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfThenCond(AIfThenCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABloc(ABloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyBloc(AEmptyBloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturn(AReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoop(ALoop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffInstr(AAffInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionInstr(AConditionInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetInstr(ARetInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopInstr(ALoopInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFcallInstr(AFcallInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEcrireInstr(AEcrireInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALDecfonc(ALDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfoncLDecfonc(ADecfoncLDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarsParameterizedDecfonc(AVarsParameterizedDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoVarsParameterizedDecfonc(ANoVarsParameterizedDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarsNoParamsDecfonc(AVarsNoParamsDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoVarsNoParamsDecfonc(ANoVarsNoParamsDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALParams(ALParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifLParams(AIdentifLParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALDecvar(ALDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarLDecvar(ADecvarLDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidLDecvar(AVoidLDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvar(ADecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADectabDecvar(ADectabDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADectab(ADectab node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcrire(TEcrire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLire(TLire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTest(TTest node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNombre(TNombre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLAcc(TLAcc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRAcc(TRAcc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLSqr(TLSqr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRSqr(TRSqr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRet(TRet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentif(TIdentif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicol(TSemicol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
