/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AOnlyFuncProgramme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AOrExpr */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAndExpr */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAndLogAnd */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ALessLogAnd */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce ALessComparison */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AEqualityComparison */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AAdsousComparison */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AAdditionAdsous */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ASousAdsous */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AMultdivAdsous */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AMultMultdiv */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce ADivMultdiv */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ANegMultdiv */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce ANegNeg */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AParNeg */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce AParenthesisPar */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce ANombrePar */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce AIdentifPar */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce AArrPar */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce AFcallPar */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce ALcallPar */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce AEcrireCall */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce ALireCall */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AListExprListExpr */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list, false);
            }
            break;
            case 26: /* reduce AExprListExpr */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list, false);
            }
            break;
            case 27: /* reduce AEmptyListExpr */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, false);
            }
            break;
            case 28: /* reduce AFunctionCall */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce AListInstr */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AInstrListInstr */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list, false);
            }
            break;
            case 31: /* reduce AIdentifTab */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce AAffectation */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce ATabAffectation */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AIfThenCondElse */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce AIfThenElseCondElse */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AIfThenCond */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce ABloc */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list, false);
            }
            break;
            case 38: /* reduce AEmptyBloc */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list, false);
            }
            break;
            case 39: /* reduce AReturn */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list, false);
            }
            break;
            case 40: /* reduce ALoop */
            {
                ArrayList<Object> list = new40();
                push(goTo(19), list, false);
            }
            break;
            case 41: /* reduce AAffInstr */
            {
                ArrayList<Object> list = new41();
                push(goTo(20), list, false);
            }
            break;
            case 42: /* reduce AConditionInstr */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list, false);
            }
            break;
            case 43: /* reduce ARetInstr */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce ALoopInstr */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list, false);
            }
            break;
            case 45: /* reduce AFcallInstr */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list, false);
            }
            break;
            case 46: /* reduce AEcrireInstr */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list, false);
            }
            break;
            case 47: /* reduce ALDecfonc */
            {
                ArrayList<Object> list = new47();
                push(goTo(21), list, false);
            }
            break;
            case 48: /* reduce ADecfoncLDecfonc */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list, false);
            }
            break;
            case 49: /* reduce AVarsParameterizedDecfonc */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list, false);
            }
            break;
            case 50: /* reduce ANoVarsParameterizedDecfonc */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list, false);
            }
            break;
            case 51: /* reduce AVarsNoParamsDecfonc */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list, false);
            }
            break;
            case 52: /* reduce ANoVarsNoParamsDecfonc */
            {
                ArrayList<Object> list = new52();
                push(goTo(22), list, false);
            }
            break;
            case 53: /* reduce ALParams */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list, false);
            }
            break;
            case 54: /* reduce AIdentifLParams */
            {
                ArrayList<Object> list = new54();
                push(goTo(23), list, false);
            }
            break;
            case 55: /* reduce ALDecvar */
            {
                ArrayList<Object> list = new55();
                push(goTo(24), list, false);
            }
            break;
            case 56: /* reduce ADecvarLDecvar */
            {
                ArrayList<Object> list = new56();
                push(goTo(24), list, false);
            }
            break;
            case 57: /* reduce AVoidLDecvar */
            {
                ArrayList<Object> list = new57();
                push(goTo(24), list, false);
            }
            break;
            case 58: /* reduce ADecvar */
            {
                ArrayList<Object> list = new58();
                push(goTo(25), list, false);
            }
            break;
            case 59: /* reduce ADectabDecvar */
            {
                ArrayList<Object> list = new59();
                push(goTo(25), list, false);
            }
            break;
            case 60: /* reduce ADectab */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLDecvar pldecvarNode2;
        TSemicol tsemicolNode3;
        PLDecfonc pldecfoncNode4;
        pldecvarNode2 = (PLDecvar)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);
        pldecfoncNode4 = (PLDecfonc)nodeArrayList3.get(0);

        pprogrammeNode1 = new AProgramme(pldecvarNode2, tsemicolNode3, pldecfoncNode4);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AOnlyFuncProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLDecfonc pldecfoncNode2;
        pldecfoncNode2 = (PLDecfonc)nodeArrayList1.get(0);

        pprogrammeNode1 = new AOnlyFuncProgramme(pldecfoncNode2);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOr torNode3;
        PLogAnd plogandNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        plogandNode4 = (PLogAnd)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, torNode3, plogandNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAndExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLogAnd plogandNode2;
        plogandNode2 = (PLogAnd)nodeArrayList1.get(0);

        pexprNode1 = new AAndExpr(plogandNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAndLogAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogAnd plogandNode1;
        {
            // Block
        PLogAnd plogandNode2;
        TAnd tandNode3;
        PComparison pcomparisonNode4;
        plogandNode2 = (PLogAnd)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList3.get(0);

        plogandNode1 = new AAndLogAnd(plogandNode2, tandNode3, pcomparisonNode4);
        }
	nodeList.add(plogandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ALessLogAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogAnd plogandNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);

        plogandNode1 = new ALessLogAnd(pcomparisonNode2);
        }
	nodeList.add(plogandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ALessComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TLess tlessNode3;
        PAdsous padsousNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        padsousNode4 = (PAdsous)nodeArrayList3.get(0);

        pcomparisonNode1 = new ALessComparison(pcomparisonNode2, tlessNode3, padsousNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AEqualityComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        TEquals tequalsNode3;
        PAdsous padsousNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        padsousNode4 = (PAdsous)nodeArrayList3.get(0);

        pcomparisonNode1 = new AEqualityComparison(pcomparisonNode2, tequalsNode3, padsousNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAdsousComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PAdsous padsousNode2;
        padsousNode2 = (PAdsous)nodeArrayList1.get(0);

        pcomparisonNode1 = new AAdsousComparison(padsousNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAdditionAdsous */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdsous padsousNode1;
        {
            // Block
        PAdsous padsousNode2;
        TPlus tplusNode3;
        PMultdiv pmultdivNode4;
        padsousNode2 = (PAdsous)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultdivNode4 = (PMultdiv)nodeArrayList3.get(0);

        padsousNode1 = new AAdditionAdsous(padsousNode2, tplusNode3, pmultdivNode4);
        }
	nodeList.add(padsousNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ASousAdsous */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdsous padsousNode1;
        {
            // Block
        PAdsous padsousNode2;
        TMinus tminusNode3;
        PMultdiv pmultdivNode4;
        padsousNode2 = (PAdsous)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultdivNode4 = (PMultdiv)nodeArrayList3.get(0);

        padsousNode1 = new ASousAdsous(padsousNode2, tminusNode3, pmultdivNode4);
        }
	nodeList.add(padsousNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMultdivAdsous */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdsous padsousNode1;
        {
            // Block
        PMultdiv pmultdivNode2;
        pmultdivNode2 = (PMultdiv)nodeArrayList1.get(0);

        padsousNode1 = new AMultdivAdsous(pmultdivNode2);
        }
	nodeList.add(padsousNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AMultMultdiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultdiv pmultdivNode1;
        {
            // Block
        PMultdiv pmultdivNode2;
        TMult tmultNode3;
        PNeg pnegNode4;
        pmultdivNode2 = (PMultdiv)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pnegNode4 = (PNeg)nodeArrayList3.get(0);

        pmultdivNode1 = new AMultMultdiv(pmultdivNode2, tmultNode3, pnegNode4);
        }
	nodeList.add(pmultdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADivMultdiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultdiv pmultdivNode1;
        {
            // Block
        PMultdiv pmultdivNode2;
        TDiv tdivNode3;
        PNeg pnegNode4;
        pmultdivNode2 = (PMultdiv)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pnegNode4 = (PNeg)nodeArrayList3.get(0);

        pmultdivNode1 = new ADivMultdiv(pmultdivNode2, tdivNode3, pnegNode4);
        }
	nodeList.add(pmultdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANegMultdiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultdiv pmultdivNode1;
        {
            // Block
        PNeg pnegNode2;
        pnegNode2 = (PNeg)nodeArrayList1.get(0);

        pmultdivNode1 = new ANegMultdiv(pnegNode2);
        }
	nodeList.add(pmultdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANegNeg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNeg pnegNode1;
        {
            // Block
        TNot tnotNode2;
        PNeg pnegNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pnegNode3 = (PNeg)nodeArrayList2.get(0);

        pnegNode1 = new ANegNeg(tnotNode2, pnegNode3);
        }
	nodeList.add(pnegNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AParNeg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNeg pnegNode1;
        {
            // Block
        PPar pparNode2;
        pparNode2 = (PPar)nodeArrayList1.get(0);

        pnegNode1 = new AParNeg(pparNode2);
        }
	nodeList.add(pnegNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AParenthesisPar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pparNode1 = new AParenthesisPar(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANombrePar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pparNode1 = new ANombrePar(tnombreNode2);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AIdentifPar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pparNode1 = new AIdentifPar(tidentifNode2);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AArrPar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLSqr tlsqrNode3;
        PExpr pexprNode4;
        TRSqr trsqrNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlsqrNode3 = (TLSqr)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trsqrNode5 = (TRSqr)nodeArrayList4.get(0);

        pparNode1 = new AArrPar(tidentifNode2, tlsqrNode3, pexprNode4, trsqrNode5);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFcallPar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pparNode1 = new AFcallPar(pfunctioncallNode2);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ALcallPar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        PLireCall plirecallNode2;
        plirecallNode2 = (PLireCall)nodeArrayList1.get(0);

        pparNode1 = new ALcallPar(plirecallNode2);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AEcrireCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEcrireCall pecrirecallNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pecrirecallNode1 = new AEcrireCall(tecrireNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pecrirecallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ALireCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLireCall plirecallNode1;
        {
            // Block
        TLire tlireNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        plirecallNode1 = new ALireCall(tlireNode2, tlparNode3, trparNode4);
        }
	nodeList.add(plirecallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AListExprListExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListExpr plistexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TComma tcommaNode3;
        PListExpr plistexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        plistexprNode4 = (PListExpr)nodeArrayList3.get(0);

        plistexprNode1 = new AListExprListExpr(pexprNode2, tcommaNode3, plistexprNode4);
        }
	nodeList.add(plistexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AExprListExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListExpr plistexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        plistexprNode1 = new AExprListExpr(pexprNode2);
        }
	nodeList.add(plistexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEmptyListExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListExpr plistexprNode1;
        {
            // Block

        plistexprNode1 = new AEmptyListExpr();
        }
	nodeList.add(plistexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AFunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLPar tlparNode3;
        PListExpr plistexprNode4;
        TRPar trparNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plistexprNode4 = (PListExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifNode2, tlparNode3, plistexprNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AListInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListInstr plistinstrNode1;
        {
            // Block
        PInstr pinstrNode2;
        PListInstr plistinstrNode3;
        pinstrNode2 = (PInstr)nodeArrayList1.get(0);
        plistinstrNode3 = (PListInstr)nodeArrayList2.get(0);

        plistinstrNode1 = new AListInstr(pinstrNode2, plistinstrNode3);
        }
	nodeList.add(plistinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AInstrListInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListInstr plistinstrNode1;
        {
            // Block
        PInstr pinstrNode2;
        pinstrNode2 = (PInstr)nodeArrayList1.get(0);

        plistinstrNode1 = new AInstrListInstr(pinstrNode2);
        }
	nodeList.add(plistinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIdentifTab */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentifTab pidentiftabNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLSqr tlsqrNode3;
        PExpr pexprNode4;
        TRSqr trsqrNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlsqrNode3 = (TLSqr)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trsqrNode5 = (TRSqr)nodeArrayList4.get(0);

        pidentiftabNode1 = new AIdentifTab(tidentifNode2, tlsqrNode3, pexprNode4, trsqrNode5);
        }
	nodeList.add(pidentiftabNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffectation paffectationNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TEquals tequalsNode3;
        PExpr pexprNode4;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        paffectationNode1 = new AAffectation(tidentifNode2, tequalsNode3, pexprNode4);
        }
	nodeList.add(paffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATabAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffectation paffectationNode1;
        {
            // Block
        PIdentifTab pidentiftabNode2;
        TEquals tequalsNode3;
        PExpr pexprNode4;
        pidentiftabNode2 = (PIdentifTab)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        paffectationNode1 = new ATabAffectation(pidentiftabNode2, tequalsNode3, pexprNode4);
        }
	nodeList.add(paffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AIfThenCondElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondElse pcondelseNode1;
        {
            // Block
        PCond pcondNode2;
        pcondNode2 = (PCond)nodeArrayList1.get(0);

        pcondelseNode1 = new AIfThenCondElse(pcondNode2);
        }
	nodeList.add(pcondelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIfThenElseCondElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondElse pcondelseNode1;
        {
            // Block
        PCond pcondNode2;
        TElse telseNode3;
        PBloc pblocNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        telseNode3 = (TElse)nodeArrayList2.get(0);
        pblocNode4 = (PBloc)nodeArrayList3.get(0);

        pcondelseNode1 = new AIfThenElseCondElse(pcondNode2, telseNode3, pblocNode4);
        }
	nodeList.add(pcondelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIfThenCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        PBloc pblocNode5;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        pcondNode1 = new AIfThenCond(tifNode2, pexprNode3, tthenNode4, pblocNode5);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ABloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloc pblocNode1;
        {
            // Block
        TLAcc tlaccNode2;
        PListInstr plistinstrNode3;
        TRAcc traccNode4;
        tlaccNode2 = (TLAcc)nodeArrayList1.get(0);
        plistinstrNode3 = (PListInstr)nodeArrayList2.get(0);
        traccNode4 = (TRAcc)nodeArrayList3.get(0);

        pblocNode1 = new ABloc(tlaccNode2, plistinstrNode3, traccNode4);
        }
	nodeList.add(pblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEmptyBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloc pblocNode1;
        {
            // Block
        TLAcc tlaccNode2;
        TRAcc traccNode3;
        tlaccNode2 = (TLAcc)nodeArrayList1.get(0);
        traccNode3 = (TRAcc)nodeArrayList2.get(0);

        pblocNode1 = new AEmptyBloc(tlaccNode2, traccNode3);
        }
	nodeList.add(pblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AReturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturn preturnNode1;
        {
            // Block
        TRet tretNode2;
        PExpr pexprNode3;
        tretNode2 = (TRet)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        preturnNode1 = new AReturn(tretNode2, pexprNode3);
        }
	nodeList.add(preturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ALoop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoop ploopNode1;
        {
            // Block
        TWhile twhileNode2;
        PExpr pexprNode3;
        TDo tdoNode4;
        PBloc pblocNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        ploopNode1 = new ALoop(twhileNode2, pexprNode3, tdoNode4, pblocNode5);
        }
	nodeList.add(ploopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAffInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PAffectation paffectationNode2;
        TSemicol tsemicolNode3;
        paffectationNode2 = (PAffectation)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);

        pinstrNode1 = new AAffInstr(paffectationNode2, tsemicolNode3);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AConditionInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PCondElse pcondelseNode2;
        pcondelseNode2 = (PCondElse)nodeArrayList1.get(0);

        pinstrNode1 = new AConditionInstr(pcondelseNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ARetInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PReturn preturnNode2;
        TSemicol tsemicolNode3;
        preturnNode2 = (PReturn)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);

        pinstrNode1 = new ARetInstr(preturnNode2, tsemicolNode3);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ALoopInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PLoop ploopNode2;
        ploopNode2 = (PLoop)nodeArrayList1.get(0);

        pinstrNode1 = new ALoopInstr(ploopNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFcallInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        TSemicol tsemicolNode3;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);

        pinstrNode1 = new AFcallInstr(pfunctioncallNode2, tsemicolNode3);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AEcrireInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PEcrireCall pecrirecallNode2;
        TSemicol tsemicolNode3;
        pecrirecallNode2 = (PEcrireCall)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);

        pinstrNode1 = new AEcrireInstr(pecrirecallNode2, tsemicolNode3);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ALDecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLDecfonc pldecfoncNode1;
        {
            // Block
        PDecfonc pdecfoncNode2;
        PLDecfonc pldecfoncNode3;
        pdecfoncNode2 = (PDecfonc)nodeArrayList1.get(0);
        pldecfoncNode3 = (PLDecfonc)nodeArrayList2.get(0);

        pldecfoncNode1 = new ALDecfonc(pdecfoncNode2, pldecfoncNode3);
        }
	nodeList.add(pldecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADecfoncLDecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLDecfonc pldecfoncNode1;
        {
            // Block
        PDecfonc pdecfoncNode2;
        pdecfoncNode2 = (PDecfonc)nodeArrayList1.get(0);

        pldecfoncNode1 = new ADecfoncLDecfonc(pdecfoncNode2);
        }
	nodeList.add(pldecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AVarsParameterizedDecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecfonc pdecfoncNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLPar tlparNode3;
        PLParams plparamsNode4;
        TRPar trparNode5;
        PLDecvar pldecvarNode6;
        TSemicol tsemicolNode7;
        PBloc pblocNode8;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plparamsNode4 = (PLParams)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pldecvarNode6 = (PLDecvar)nodeArrayList5.get(0);
        tsemicolNode7 = (TSemicol)nodeArrayList6.get(0);
        pblocNode8 = (PBloc)nodeArrayList7.get(0);

        pdecfoncNode1 = new AVarsParameterizedDecfonc(tidentifNode2, tlparNode3, plparamsNode4, trparNode5, pldecvarNode6, tsemicolNode7, pblocNode8);
        }
	nodeList.add(pdecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANoVarsParameterizedDecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecfonc pdecfoncNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLPar tlparNode3;
        PLParams plparamsNode4;
        TRPar trparNode5;
        PBloc pblocNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plparamsNode4 = (PLParams)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pblocNode6 = (PBloc)nodeArrayList5.get(0);

        pdecfoncNode1 = new ANoVarsParameterizedDecfonc(tidentifNode2, tlparNode3, plparamsNode4, trparNode5, pblocNode6);
        }
	nodeList.add(pdecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AVarsNoParamsDecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecfonc pdecfoncNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        PLDecvar pldecvarNode5;
        TSemicol tsemicolNode6;
        PBloc pblocNode7;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        pldecvarNode5 = (PLDecvar)nodeArrayList4.get(0);
        tsemicolNode6 = (TSemicol)nodeArrayList5.get(0);
        pblocNode7 = (PBloc)nodeArrayList6.get(0);

        pdecfoncNode1 = new AVarsNoParamsDecfonc(tidentifNode2, tlparNode3, trparNode4, pldecvarNode5, tsemicolNode6, pblocNode7);
        }
	nodeList.add(pdecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ANoVarsNoParamsDecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecfonc pdecfoncNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        PBloc pblocNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        pdecfoncNode1 = new ANoVarsNoParamsDecfonc(tidentifNode2, tlparNode3, trparNode4, pblocNode5);
        }
	nodeList.add(pdecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ALParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLParams plparamsNode1;
        {
            // Block
        TType ttypeNode2;
        TIdentif tidentifNode3;
        TComma tcommaNode4;
        PLParams plparamsNode5;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tcommaNode4 = (TComma)nodeArrayList3.get(0);
        plparamsNode5 = (PLParams)nodeArrayList4.get(0);

        plparamsNode1 = new ALParams(ttypeNode2, tidentifNode3, tcommaNode4, plparamsNode5);
        }
	nodeList.add(plparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AIdentifLParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLParams plparamsNode1;
        {
            // Block
        TType ttypeNode2;
        TIdentif tidentifNode3;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        plparamsNode1 = new AIdentifLParams(ttypeNode2, tidentifNode3);
        }
	nodeList.add(plparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ALDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLDecvar pldecvarNode1;
        {
            // Block
        PDecvar pdecvarNode2;
        TComma tcommaNode3;
        PLDecvar pldecvarNode4;
        pdecvarNode2 = (PDecvar)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pldecvarNode4 = (PLDecvar)nodeArrayList3.get(0);

        pldecvarNode1 = new ALDecvar(pdecvarNode2, tcommaNode3, pldecvarNode4);
        }
	nodeList.add(pldecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ADecvarLDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLDecvar pldecvarNode1;
        {
            // Block
        PDecvar pdecvarNode2;
        pdecvarNode2 = (PDecvar)nodeArrayList1.get(0);

        pldecvarNode1 = new ADecvarLDecvar(pdecvarNode2);
        }
	nodeList.add(pldecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AVoidLDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLDecvar pldecvarNode1;
        {
            // Block

        pldecvarNode1 = new AVoidLDecvar();
        }
	nodeList.add(pldecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ADecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        TType ttypeNode2;
        TIdentif tidentifNode3;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pdecvarNode1 = new ADecvar(ttypeNode2, tidentifNode3);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ADectabDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        PDectab pdectabNode2;
        pdectabNode2 = (PDectab)nodeArrayList1.get(0);

        pdecvarNode1 = new ADectabDecvar(pdectabNode2);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ADectab */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDectab pdectabNode1;
        {
            // Block
        TType ttypeNode2;
        TIdentif tidentifNode3;
        TLSqr tlsqrNode4;
        TNombre tnombreNode5;
        TRSqr trsqrNode6;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlsqrNode4 = (TLSqr)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        trsqrNode6 = (TRSqr)nodeArrayList5.get(0);

        pdectabNode1 = new ADectab(ttypeNode2, tidentifNode3, tlsqrNode4, tnombreNode5, trsqrNode6);
        }
	nodeList.add(pdectabNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 57}, {5, SHIFT, 1}, {15, SHIFT, 2}, },
			{{-1, ERROR, 1}, {15, SHIFT, 9}, },
			{{-1, ERROR, 2}, {25, SHIFT, 10}, },
			{{-1, ERROR, 3}, {29, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 48}, {15, SHIFT, 2}, },
			{{-1, ERROR, 6}, {28, SHIFT, 12}, },
			{{-1, REDUCE, 56}, {27, SHIFT, 13}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 14}, },
			{{-1, ERROR, 10}, {5, SHIFT, 15}, {26, SHIFT, 16}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 12}, {15, SHIFT, 2}, },
			{{-1, REDUCE, 57}, {5, SHIFT, 1}, },
			{{-1, ERROR, 14}, {3, SHIFT, 20}, },
			{{-1, ERROR, 15}, {15, SHIFT, 21}, },
			{{-1, REDUCE, 57}, {5, SHIFT, 1}, {8, SHIFT, 22}, },
			{{-1, ERROR, 17}, {26, SHIFT, 25}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 20}, {11, SHIFT, 26}, },
			{{-1, REDUCE, 54}, {27, SHIFT, 27}, },
			{{-1, ERROR, 22}, {0, SHIFT, 28}, {4, SHIFT, 29}, {9, SHIFT, 30}, {12, SHIFT, 31}, {13, SHIFT, 32}, {15, SHIFT, 33}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 24}, {28, SHIFT, 44}, },
			{{-1, REDUCE, 57}, {5, SHIFT, 1}, {8, SHIFT, 22}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 27}, {5, SHIFT, 15}, },
			{{-1, ERROR, 28}, {25, SHIFT, 48}, },
			{{-1, ERROR, 29}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 31}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 32}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 33}, {10, SHIFT, 65}, {24, SHIFT, 66}, {25, SHIFT, 67}, },
			{{-1, ERROR, 34}, {28, SHIFT, 68}, },
			{{-1, ERROR, 35}, {28, SHIFT, 69}, },
			{{-1, ERROR, 36}, {9, SHIFT, 70}, },
			{{-1, ERROR, 37}, {24, SHIFT, 71}, },
			{{-1, ERROR, 38}, {28, SHIFT, 72}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 34}, {7, SHIFT, 73}, },
			{{-1, ERROR, 41}, {28, SHIFT, 74}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 28}, {4, SHIFT, 29}, {12, SHIFT, 31}, {13, SHIFT, 32}, {15, SHIFT, 33}, },
			{{-1, ERROR, 44}, {8, SHIFT, 22}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 46}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 48}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 49}, {25, SHIFT, 79}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, {10, SHIFT, 80}, {25, SHIFT, 67}, },
			{{-1, ERROR, 52}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 53}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 54}, {6, SHIFT, 83}, {18, SHIFT, 84}, },
			{{-1, REDUCE, 3}, {19, SHIFT, 85}, },
			{{-1, REDUCE, 5}, {20, SHIFT, 86}, {24, SHIFT, 87}, },
			{{-1, REDUCE, 8}, {16, SHIFT, 88}, {17, SHIFT, 89}, },
			{{-1, REDUCE, 11}, {21, SHIFT, 90}, {22, SHIFT, 91}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 39}, {18, SHIFT, 84}, },
			{{-1, ERROR, 64}, {14, SHIFT, 92}, {18, SHIFT, 84}, },
			{{-1, ERROR, 65}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 66}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, REDUCE, 27}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 71}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 73}, {8, SHIFT, 22}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 77}, {8, SHIFT, 22}, },
			{{-1, ERROR, 78}, {18, SHIFT, 84}, {26, SHIFT, 100}, },
			{{-1, ERROR, 79}, {26, SHIFT, 101}, },
			{{-1, ERROR, 80}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 82}, {18, SHIFT, 84}, {26, SHIFT, 103}, },
			{{-1, ERROR, 83}, {8, SHIFT, 22}, },
			{{-1, ERROR, 84}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 85}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 86}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 87}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 88}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 89}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 90}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 91}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, ERROR, 92}, {8, SHIFT, 22}, },
			{{-1, ERROR, 93}, {11, SHIFT, 114}, {18, SHIFT, 84}, },
			{{-1, REDUCE, 32}, {18, SHIFT, 84}, },
			{{-1, REDUCE, 26}, {18, SHIFT, 84}, {27, SHIFT, 115}, },
			{{-1, ERROR, 96}, {26, SHIFT, 116}, },
			{{-1, REDUCE, 33}, {18, SHIFT, 84}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 102}, {11, SHIFT, 117}, {18, SHIFT, 84}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 2}, {19, SHIFT, 85}, },
			{{-1, REDUCE, 4}, {20, SHIFT, 86}, {24, SHIFT, 87}, },
			{{-1, REDUCE, 6}, {16, SHIFT, 88}, {17, SHIFT, 89}, },
			{{-1, REDUCE, 7}, {16, SHIFT, 88}, {17, SHIFT, 89}, },
			{{-1, REDUCE, 9}, {21, SHIFT, 90}, {22, SHIFT, 91}, },
			{{-1, REDUCE, 10}, {21, SHIFT, 90}, {22, SHIFT, 91}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 27}, {1, SHIFT, 49}, {3, SHIFT, 50}, {15, SHIFT, 51}, {23, SHIFT, 52}, {25, SHIFT, 53}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 25}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 95}, {29, 54}, {31, 63}, {32, 64}, {48, 78}, {53, 82}, {65, 93}, {66, 94}, {71, 97}, {80, 102}, },
			{{-1, 55}, {84, 105}, },
			{{-1, 56}, {85, 106}, },
			{{-1, 57}, {86, 107}, {87, 108}, },
			{{-1, 58}, {88, 109}, {89, 110}, },
			{{-1, 59}, {52, 81}, {90, 111}, {91, 112}, },
			{{-1, 60}, },
			{{-1, 34}, },
			{{-1, 61}, },
			{{-1, 96}, {115, 118}, },
			{{-1, 62}, {22, 35}, {43, 35}, },
			{{-1, 36}, {43, 75}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 23}, {25, 45}, {44, 76}, {73, 98}, {77, 99}, {83, 104}, {92, 113}, },
			{{-1, 41}, },
			{{-1, 42}, },
			{{-1, 43}, },
			{{-1, 4}, {5, 11}, {12, 18}, },
			{{-1, 5}, },
			{{-1, 17}, {27, 47}, },
			{{-1, 6}, {13, 19}, {16, 24}, {25, 46}, },
			{{-1, 7}, },
			{{-1, 8}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', identif, ';'",
			"expecting: identif",
			"expecting: '('",
			"expecting: EOF",
			"expecting: identif, EOF",
			"expecting: ';'",
			"expecting: ',', ';'",
			"expecting: '[', ',', ';'",
			"expecting: 'entier', ')'",
			"expecting: 'entier', ';'",
			"expecting: nombre",
			"expecting: 'entier', '{', ';'",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: ')', ','",
			"expecting: 'ecrire', 'si', '}', 'retour', 'tantque', identif",
			"expecting: 'entier'",
			"expecting: 'lire', nombre, identif, '!', '('",
			"expecting: 'ecrire', 'si', 'sinon', '}', 'retour', 'tantque', identif, EOF",
			"expecting: '[', '=', '('",
			"expecting: '}'",
			"expecting: '='",
			"expecting: 'ecrire', 'si', 'sinon', '}', 'retour', 'tantque', identif",
			"expecting: '{'",
			"expecting: 'alors', ']', 'faire', '+', '-', '|', '&', '<', '*', '/', '=', ')', ',', ';'",
			"expecting: 'alors', '[', ']', 'faire', '+', '-', '|', '&', '<', '*', '/', '=', '(', ')', ',', ';'",
			"expecting: 'alors', '|'",
			"expecting: 'alors', ']', 'faire', '|', '&', ')', ',', ';'",
			"expecting: 'alors', ']', 'faire', '|', '&', '<', '=', ')', ',', ';'",
			"expecting: 'alors', ']', 'faire', '+', '-', '|', '&', '<', '=', ')', ',', ';'",
			"expecting: '|', ';'",
			"expecting: 'faire', '|'",
			"expecting: 'lire', nombre, identif, '!', '(', ')'",
			"expecting: '|', ')'",
			"expecting: ']', '|'",
			"expecting: '|', ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 3, 1, 9, 10, 1, 11, 12, 3, 5, 13, 14, 15, 4, 5, 11, 6, 16, 2, 17, 18, 17, 17, 19, 5, 5, 20, 21, 5, 15, 22, 5, 15, 15, 23, 4, 5, 12, 17, 2, 24, 25, 17, 17, 26, 27, 28, 29, 24, 24, 24, 24, 24, 30, 31, 17, 17, 32, 15, 15, 18, 17, 15, 23, 15, 20, 4, 23, 33, 12, 17, 24, 33, 23, 17, 17, 17, 17, 17, 17, 17, 17, 23, 34, 30, 35, 12, 30, 15, 4, 5, 24, 34, 24, 22, 27, 28, 29, 29, 24, 24, 24, 24, 15, 21, 32, 24, 24, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
