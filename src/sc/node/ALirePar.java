/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ALirePar extends PPar
{
    private PLireCall _lireCall_;

    public ALirePar()
    {
        // Constructor
    }

    public ALirePar(
        @SuppressWarnings("hiding") PLireCall _lireCall_)
    {
        // Constructor
        setLireCall(_lireCall_);

    }

    @Override
    public Object clone()
    {
        return new ALirePar(
            cloneNode(this._lireCall_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALirePar(this);
    }

    public PLireCall getLireCall()
    {
        return this._lireCall_;
    }

    public void setLireCall(PLireCall node)
    {
        if(this._lireCall_ != null)
        {
            this._lireCall_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lireCall_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lireCall_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lireCall_ == child)
        {
            this._lireCall_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lireCall_ == oldChild)
        {
            setLireCall((PLireCall) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
