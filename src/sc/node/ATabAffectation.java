/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ATabAffectation extends PAffectation
{
    private PIdentifTab _identifTab_;
    private TEquals _equals_;
    private PExpr _expr_;

    public ATabAffectation()
    {
        // Constructor
    }

    public ATabAffectation(
        @SuppressWarnings("hiding") PIdentifTab _identifTab_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setIdentifTab(_identifTab_);

        setEquals(_equals_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new ATabAffectation(
            cloneNode(this._identifTab_),
            cloneNode(this._equals_),
            cloneNode(this._expr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATabAffectation(this);
    }

    public PIdentifTab getIdentifTab()
    {
        return this._identifTab_;
    }

    public void setIdentifTab(PIdentifTab node)
    {
        if(this._identifTab_ != null)
        {
            this._identifTab_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifTab_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifTab_)
            + toString(this._equals_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifTab_ == child)
        {
            this._identifTab_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifTab_ == oldChild)
        {
            setIdentifTab((PIdentifTab) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
