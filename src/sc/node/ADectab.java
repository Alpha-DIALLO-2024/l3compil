/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ADectab extends PDectab
{
    private TType _type_;
    private TIdentif _identif_;
    private TLSqr _lSqr_;
    private TNombre _nombre_;
    private TRSqr _rSqr_;

    public ADectab()
    {
        // Constructor
    }

    public ADectab(
        @SuppressWarnings("hiding") TType _type_,
        @SuppressWarnings("hiding") TIdentif _identif_,
        @SuppressWarnings("hiding") TLSqr _lSqr_,
        @SuppressWarnings("hiding") TNombre _nombre_,
        @SuppressWarnings("hiding") TRSqr _rSqr_)
    {
        // Constructor
        setType(_type_);

        setIdentif(_identif_);

        setLSqr(_lSqr_);

        setNombre(_nombre_);

        setRSqr(_rSqr_);

    }

    @Override
    public Object clone()
    {
        return new ADectab(
            cloneNode(this._type_),
            cloneNode(this._identif_),
            cloneNode(this._lSqr_),
            cloneNode(this._nombre_),
            cloneNode(this._rSqr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADectab(this);
    }

    public TType getType()
    {
        return this._type_;
    }

    public void setType(TType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TIdentif getIdentif()
    {
        return this._identif_;
    }

    public void setIdentif(TIdentif node)
    {
        if(this._identif_ != null)
        {
            this._identif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identif_ = node;
    }

    public TLSqr getLSqr()
    {
        return this._lSqr_;
    }

    public void setLSqr(TLSqr node)
    {
        if(this._lSqr_ != null)
        {
            this._lSqr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lSqr_ = node;
    }

    public TNombre getNombre()
    {
        return this._nombre_;
    }

    public void setNombre(TNombre node)
    {
        if(this._nombre_ != null)
        {
            this._nombre_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nombre_ = node;
    }

    public TRSqr getRSqr()
    {
        return this._rSqr_;
    }

    public void setRSqr(TRSqr node)
    {
        if(this._rSqr_ != null)
        {
            this._rSqr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rSqr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._identif_)
            + toString(this._lSqr_)
            + toString(this._nombre_)
            + toString(this._rSqr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._identif_ == child)
        {
            this._identif_ = null;
            return;
        }

        if(this._lSqr_ == child)
        {
            this._lSqr_ = null;
            return;
        }

        if(this._nombre_ == child)
        {
            this._nombre_ = null;
            return;
        }

        if(this._rSqr_ == child)
        {
            this._rSqr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((TType) newChild);
            return;
        }

        if(this._identif_ == oldChild)
        {
            setIdentif((TIdentif) newChild);
            return;
        }

        if(this._lSqr_ == oldChild)
        {
            setLSqr((TLSqr) newChild);
            return;
        }

        if(this._nombre_ == oldChild)
        {
            setNombre((TNombre) newChild);
            return;
        }

        if(this._rSqr_ == oldChild)
        {
            setRSqr((TRSqr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
