/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AVarsParameterizedDecfonc extends PDecfonc
{
    private TIdentif _identif_;
    private TLPar _lPar_;
    private PLParams _lParams_;
    private TRPar _rPar_;
    private PLDecvar _lDecvar_;
    private TSemicol _semicol_;
    private PBloc _bloc_;

    public AVarsParameterizedDecfonc()
    {
        // Constructor
    }

    public AVarsParameterizedDecfonc(
        @SuppressWarnings("hiding") TIdentif _identif_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PLParams _lParams_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PLDecvar _lDecvar_,
        @SuppressWarnings("hiding") TSemicol _semicol_,
        @SuppressWarnings("hiding") PBloc _bloc_)
    {
        // Constructor
        setIdentif(_identif_);

        setLPar(_lPar_);

        setLParams(_lParams_);

        setRPar(_rPar_);

        setLDecvar(_lDecvar_);

        setSemicol(_semicol_);

        setBloc(_bloc_);

    }

    @Override
    public Object clone()
    {
        return new AVarsParameterizedDecfonc(
            cloneNode(this._identif_),
            cloneNode(this._lPar_),
            cloneNode(this._lParams_),
            cloneNode(this._rPar_),
            cloneNode(this._lDecvar_),
            cloneNode(this._semicol_),
            cloneNode(this._bloc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarsParameterizedDecfonc(this);
    }

    public TIdentif getIdentif()
    {
        return this._identif_;
    }

    public void setIdentif(TIdentif node)
    {
        if(this._identif_ != null)
        {
            this._identif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identif_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PLParams getLParams()
    {
        return this._lParams_;
    }

    public void setLParams(PLParams node)
    {
        if(this._lParams_ != null)
        {
            this._lParams_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParams_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PLDecvar getLDecvar()
    {
        return this._lDecvar_;
    }

    public void setLDecvar(PLDecvar node)
    {
        if(this._lDecvar_ != null)
        {
            this._lDecvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lDecvar_ = node;
    }

    public TSemicol getSemicol()
    {
        return this._semicol_;
    }

    public void setSemicol(TSemicol node)
    {
        if(this._semicol_ != null)
        {
            this._semicol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicol_ = node;
    }

    public PBloc getBloc()
    {
        return this._bloc_;
    }

    public void setBloc(PBloc node)
    {
        if(this._bloc_ != null)
        {
            this._bloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bloc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identif_)
            + toString(this._lPar_)
            + toString(this._lParams_)
            + toString(this._rPar_)
            + toString(this._lDecvar_)
            + toString(this._semicol_)
            + toString(this._bloc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identif_ == child)
        {
            this._identif_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._lParams_ == child)
        {
            this._lParams_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._lDecvar_ == child)
        {
            this._lDecvar_ = null;
            return;
        }

        if(this._semicol_ == child)
        {
            this._semicol_ = null;
            return;
        }

        if(this._bloc_ == child)
        {
            this._bloc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identif_ == oldChild)
        {
            setIdentif((TIdentif) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._lParams_ == oldChild)
        {
            setLParams((PLParams) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._lDecvar_ == oldChild)
        {
            setLDecvar((PLDecvar) newChild);
            return;
        }

        if(this._semicol_ == oldChild)
        {
            setSemicol((TSemicol) newChild);
            return;
        }

        if(this._bloc_ == oldChild)
        {
            setBloc((PBloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
