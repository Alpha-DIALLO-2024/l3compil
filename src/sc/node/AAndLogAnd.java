/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AAndLogAnd extends PLogAnd
{
    private PLogAnd _logAnd_;
    private TAnd _and_;
    private PComparison _comparison_;

    public AAndLogAnd()
    {
        // Constructor
    }

    public AAndLogAnd(
        @SuppressWarnings("hiding") PLogAnd _logAnd_,
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") PComparison _comparison_)
    {
        // Constructor
        setLogAnd(_logAnd_);

        setAnd(_and_);

        setComparison(_comparison_);

    }

    @Override
    public Object clone()
    {
        return new AAndLogAnd(
            cloneNode(this._logAnd_),
            cloneNode(this._and_),
            cloneNode(this._comparison_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndLogAnd(this);
    }

    public PLogAnd getLogAnd()
    {
        return this._logAnd_;
    }

    public void setLogAnd(PLogAnd node)
    {
        if(this._logAnd_ != null)
        {
            this._logAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logAnd_ = node;
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public PComparison getComparison()
    {
        return this._comparison_;
    }

    public void setComparison(PComparison node)
    {
        if(this._comparison_ != null)
        {
            this._comparison_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparison_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._logAnd_)
            + toString(this._and_)
            + toString(this._comparison_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._logAnd_ == child)
        {
            this._logAnd_ = null;
            return;
        }

        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._comparison_ == child)
        {
            this._comparison_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._logAnd_ == oldChild)
        {
            setLogAnd((PLogAnd) newChild);
            return;
        }

        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._comparison_ == oldChild)
        {
            setComparison((PComparison) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
